/*
 * 1563. Stone Game V
 * https://leetcode.com/problems/stone-game-v/
 */

/*
 * - I want to use prefix sum
 */

#include <iostream>
#include <vector>
#include <algorithm>

#include "helpers/Operators.hpp"
#include "helpers/terminal_format.h"


#pragma mark - 1. DP/memorization, bottom up
// Time Limit Exceeded
class Solution1 {
#pragma mark Prefix Sum
private:
    std::vector<int> prefixSum {};

    void calculatePrefixSum(const std::vector<int>& stoneValues) {
        prefixSum.reserve(stoneValues.size() + 1);
        for (int i = 0; i < stoneValues.size(); i += 1) {
            prefixSum[i + 1] = prefixSum[i] + stoneValues[i];
        }
    }

    inline int getSum(int start, int end) {
        end += 1;
        return (prefixSum[end] - prefixSum[start]);
    }

#pragma mark Main
public:
    int stoneGameV(const std::vector<int>& stoneValues) {
        if (stoneValues.size() == 1) {
            return 0;
        }

        calculatePrefixSum(stoneValues);

        auto dp = std::vector<std::vector<int>>(stoneValues.size(), std::vector<int>(stoneValues.size(), 0));
        for (int distance = 1; distance < stoneValues.size(); distance += 1) {
            for (int end = distance; end < stoneValues.size(); end += 1) {
                const int start = end - distance;

                auto& result = dp[start][end];

                // [start, mid), [mid, end].
                for (int mid = start + 1; mid <= end; mid += 1) {
                    const int sum1 = getSum(start, mid - 1);
                    const int sum2 = getSum(mid, end);

                    if (sum1 < sum2) {
                        const int& previousSum1 = dp[start][mid - 1];
                        const int newSum1 = previousSum1 + sum1;
                        result = std::max(result, newSum1);
                    } else if (sum1 > sum2) {
                        const int& previousSum2 = dp[mid][end];
                        const int newSum2 = previousSum2 + sum2;
                        result = std::max(result, newSum2);
                    } else {
                        // Choose whichever is bigger.
                        const int& previousSum1 = dp[start][mid - 1];
                        const int newSum1 = previousSum1 + sum1;

                        const int& previousSum2 = dp[mid][end];
                        const int newSum2 = previousSum2 + sum2;

                        result = std::max(result, std::max(newSum1, newSum2));
                    }
                }
            }
        }

        return dp.front().back();
    }
};


#pragma mark - 2. DP/memorization, top down/recursion
// Runtime: 759 ms, faster than 27.29% of C++ online submissions for Stone Game V.
// Memory Usage: 22 MB, less than 29.13% of C++ online submissions for Stone Game V.
class Solution {
#pragma mark Prefix Sum
private:
    std::vector<int> prefixSum {};

    void calculatePrefixSum(const std::vector<int>& stoneValues) {
        prefixSum.reserve(stoneValues.size() + 1);
        for (int i = 0; i < stoneValues.size(); i += 1) {
            prefixSum[i + 1] = prefixSum[i] + stoneValues[i];
        }
    }

    inline int getSum(int start, int end) {
        end += 1;
        return (prefixSum[end] - prefixSum[start]);
    }

#pragma mark Top down recursion
private:
    void recursion(std::vector<std::vector<int>>& dp, int start, int end) {
        int& result = dp[start][end];

        // [start, mid), [mid, end].
        for (int mid = start + 1; mid <= end; mid += 1) {
            const int sum1 = getSum(start, mid - 1);
            const int sum2 = getSum(mid, end);

            if (sum1 < sum2) {
                int& previousSum1 = dp[start][mid - 1];
                if (previousSum1 == -1) {
                    recursion(dp, start, mid - 1);
                }
                const int newSum1 = previousSum1 + sum1;
                result = std::max(result, newSum1);
            } else if (sum1 > sum2) {
                const int& previousSum2 = dp[mid][end];
                if (previousSum2 == -1) {
                    recursion(dp, mid, end);
                }
                const int newSum2 = previousSum2 + sum2;
                result = std::max(result, newSum2);
            } else {
                // Choose whichever is bigger.
                const int& previousSum1 = dp[start][mid - 1];
                if (previousSum1 == -1) {
                    recursion(dp, start, mid - 1);
                }
                const int newSum1 = previousSum1 + sum1;

                const int& previousSum2 = dp[mid][end];
                if (previousSum2 == -1) {
                    recursion(dp, mid, end);
                }
                const int newSum2 = previousSum2 + sum2;

                result = std::max(result, std::max(newSum1, newSum2));
            }
        }
    };

#pragma mark Main
public:
    int stoneGameV(const std::vector<int>& stoneValues) {
        if (stoneValues.size() == 1) {
            return 0;
        }

        calculatePrefixSum(stoneValues);

        auto dp = std::vector<std::vector<int>>(stoneValues.size(), std::vector<int>(stoneValues.size(), -1));
        for (int i = 0; i < stoneValues.size(); i += 1) {
            dp[i][i] = 0;
        }

        recursion(dp, 0, stoneValues.size() - 1);

        return dp.front().back();
    }
};


void test(const std::vector<int>& stoneValues, const int expectedResult) {
    auto solutionInstance = Solution();

    auto result = solutionInstance.stoneGameV(stoneValues);

    if (result == expectedResult) {
        std::cout << terminal_format::OK_GREEN << "[Correct] " << terminal_format::ENDC << stoneValues << ": " << result << std::endl;
    } else {
        std::cout << terminal_format::FAIL << terminal_format::BOLD << "[Wrong] " << terminal_format::ENDC << stoneValues << ": " << result << " (should be " << expectedResult << ")" << std::endl;
    }
}


int main() {
    test({6,2,3,4}, 10);
    test({2,3,4,5}, 7);
    test({3,4,5,5}, 10);
    test({6,2,3,4,5,5}, 18);
    test({7,7,7,7,7,7,7}, 28);
    test({4}, 0);
    test({481620,195828,5542,46670,738233,974708,467310,825666,77200,606303,877292,213608,105292,967552,141313,673967,203673,785440,49014,541367,688254,152014,761660,593047,987373,854321,117917,726335,563766,752574,6396,248286,433524,828524,599284,717693,520069,658832,849528,531769,203077,373331,409870,797050,400552,383742,729480,409655,706317,813656,736474,39641,303995,927317,58026,458785,679037,558287,285229,658417,772736,827373,62293,815774,24002,170600,191234,31580,933324,580224,240482,182242,817903,922807,349256,553799,185510,17108,119183,400978,203567,268035,319920,106106,652431,317242,314473,216909,495887,951361,579811,836495,426775,29715,173729,98609,859856,321420,918969,547587,211504,239936,27682,910070,653257,529768,235737,140475,156450,699991,342106,475250,843455,315155,989822,825114,42598,233635,399507,792674,266815,916691,712532,335775,347631,188768,961742,525225,687712,641607,602051,683737,703165,696596,274089,392719,822098,104230,99813,588302,405359,174027,102558,828458,81789,637963,614114,804438,980917,116561,662520,829502,77666,50694,413582,92082,689480,554998,987812,670297,80449,555962,828658,717524,349232,540257,416343,210841,11151,550955,301767,455249,610856,21618,111321,406179,917853,857188,461493,78636,387337,809719,85787,42607,196917,128656,18579,718305,89940,372912,954629,970710,724897,427260,426166,111854,706987,454858,542176,524102,558064,133103,180014,377633,964624,614967,630231,210947,112776,44507,678425,989352,551603,59301,926169,785223,789629,143453,9190,31810,482515,516603,111300,594966,129095,59539,682664,730214,937954,228988,945205,231582,361932,720550,612502,229790,427364,19174,758126,645102,288915,377400,75874,925885,684858,618018,324357,80693,965318,534881,371082,950833,434924,286531,442321,590576,683780,15477,21023,914654,662770,414559,981587,217646,970840,630873,803590,183468,443447,723840,14596,943777,714701,761790,869807,248886,573635,146552,776710,493500,268548,375940,590030,929213,973187,683794,769458,129440,830890,529602,709755,183450,109053,903550,471625,641173,812571,421800,788019,767056,610645,856944,114521,338010,67840,484973,462714,262584,404973,371207,749896,790069,775104,316587,621208,19555,620295,526075,705461,262702,548452,744603,119534,408375,390527,740395,975998,344964,405254,237920,402689,970109,724225,591674,398145,57673,259726,214278,790326,732029,457817,277335,264198,885304,988984,697907,315818,7979,256072,166605,630001,986987,137199,687847,170073,982481,586143,317654,222430,653558,641964,491056,407463,924693,910151,54281,621901,787784,512991,540422,859019,957111,865141,430326,718992,159300,758089,637922,919436,698525,658145,303516,186469,864374,781060,585764,159351,375995,794160,875166,540738,994723,269753,207480,554246,598697,717623,186799,956765,341652,39036,934936,864503,395377,599431,576253,502370,501365,494680,818176,751949,770268,914676,795435,588600,186225,160420,756559,520689,413365,951719,194668,80491,318320,444664,920559,744732,878003,355363,93306,123354,302215,432340,84512,561981,669497,267991,992830,315643,476409,681444,440043,83075,182221,47521,493259,585807,147036,232727,513142,943511,845024,646013,380809,297995,490066,655326,838973,594127,743502,693799,398708,65096,661927,381690,25624,820189,865118,626106,186823,285635,511740,657637,999430,180100,104617,29262,438263,552762,248855,736476}, 235230292);
    test({}, 494000000);

    return 0;
}
